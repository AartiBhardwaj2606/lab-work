/*ARRANGING ELEMENTS OF ARRAY SUCH THAT POSITIVE AND NEGATIVE ELEMETS ARE SEPARATED ON EITHER SIDES OF THE ARRAY WITHOUT ACTUALLY ALTERING THE ORDER
,WITHOUT USING DUPLICATE ARRAY */ 
#include <stdio.h>

int main()
{
    int arr[50],i,j,num,res;
    printf("ENTER TOTAL ELEMENTS");
    scanf("%d",&num);
    printf("ENTER ELEMENTS");
    //INPUT ELEMENTS
    for(i=0;i<num;i++)
    {
        scanf("%d",&arr[i]);
    }
    //LOGIC
    for(i=0;i<num;i++)
    {
        for(j=0;j<num-1;j++)
        {
            if(arr[j]>=0 && arr[j+1]<0)
            {
                res=arr[j];
                arr[j]=arr[j+1];
                arr[j+1]=res;
            }
        }
    }
    //FINAL ARRAY
    printf("AFTER ARRANGING ELEMENTS");
    for(i=0;i<num;i++)
    {
        printf("\t%d",arr[i]);
    }
    return 0;
}



/*TO FIND THE FREQUENCY OF ALL ELEMENTS IN AN ARRAY*/
#include <stdio.h>
#define MAX 20
int main()
{
    int arr[MAX],freq[MAX],num,i,j;
    printf("ENTER SIZE");
    scanf("%d",&num);
    printf("ENTER ELEMENTS");
    //ARRAY INITILISATION
    for(i=0;i<num;i++)
    {
        scanf("%d",&arr[i]);
        freq[i]=1;
    }
    //LOGIC
    for(i=0;i<num;i++)
    {
       for(j=i+1;j<num;j++)
       {
           if(arr[i]==arr[j] && freq[j]!=0)
           {
               freq[i]++;
               freq[j]=0;
           }
       }
    }
    //OUTPUT
    for(i=0;i<num;i++)
    {
        if(freq[i]!=0)
        {
            printf("FREQUENCY OF %d IS %d TIMES\n",arr[i],freq[i]);
        }
    }
    return 0;
}



#include<stdio.h>
int delete_front(int*,int,int);
int delete_rare(int*,int,int);
int insert_rare(int*,int,int);
int insert_front(int*,int,int);
void display(int*,int,int,int,int);
#define MAX 20
int main()
{
    int array[MAX],i,F1=-1,F2=MAX,R1=-1,R2=MAX,choice;
    do{
        printf("ENTER YOUR CHOICE:");
        printf("\n1:INSERT AT FRONT\n2:INSERT AT RARE\n3:DELETE AT FRONT\n4:DELETE AT RARE\n5:EXIT\n");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1:
            {
                R1=insert_front(array,R1,R2);
                if(F1==-1)
                F1++;
                break;
            }
            case 2:
            {
                R2=insert_rare(array,R1,R2);
                if(F2==MAX)
                F2--;
                break;
            }
            case 3:
            {
                F1=delete_front(array,R1,F1);
                if(F1==R1)
                {
                F1=-1;
                R1=-1;
                }
                break;
            }
            case 4:
            {
                F2=delete_rare(array,R1,F2);
                if(F2==R2)
                {
                    F2=MAX;
                    R2=MAX;
                }
                break;
            }
            case 5:
            {
                printf("FRONT ELEMENTS");
                int x,y;
                x=F1;
                y=R1;
                while(F1<=R1)
                {
                    printf("%d",array[F1++]);
                }
                x=F2;
                y=R2;
                while(F2>=R2)
                {
                    printf("%d",array[F2--]);
                }
                break;
            }
            default:
            {
                break;
            }
        }
    }while(choice<=5);
    return 0;
    
}


void display(int array[],int F1,int F2,int R1,int R2)
{
    printf("FRONT ELEMENTS");
    int x,y;
    x=F1;
    y=R1;
    while(F1<=R1)
    {
       printf("%d",array[F1++]);
    }
    x=F2;
    y=R2;
    while(F2>=R2)
    {
        printf("%d",array[F2--]);
    } 
}


int insert_front(int array[],int R1,int R2)
{
    int x;
    if(R1!=R2 && R1!= MAX-1)
    {
        printf("ENTER VALUE");
        scanf("%d",&x);
        R1++;
        array{R1]=x;
    }
    else{
        printf("STACK OVERFLAW");
        }
    return R1;
}


int insert_rare(int array[],int R1,int R2)
{
    int x;
    if(R1!=R2 && R2!= 0)
    {
        printf("ENTER VALUE");
        scanf("%d",&x);
        R2--;
        array{R2]=x;
    }
    else{
        printf("STACK OVERFLAW");
        }
    return R2;
}

int delete_front(int array[],int R1,int F1)
{
    int x;
    if(F1!=-1 && F1< R1)
    {
       
        R1++;
        array{R1]=x;
    }
    else{
        printf("STACK OVERFLAW");
        }
    return R1;
}



def calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):
    eligible_loan_amount=0
    bank_emi_expected=0
    eligible_loan_amount=0
    #Start writing your code here
    if(account_number%1000!=1):
        print("Invalid account number")
        return 
    if(account_balance<100000):
        print("Insufficient account balance")
        return
    if(loan_type not in ['House','Business','Car']):
        print("Invalid loan type or salary")
        return
    if((loan_type=='Car') and (salary>25000) and (customer_emi_expected<=36) and (loan_amount_expected<=500000)):
        eligible_loan_amount=500000
        bank_emi_expected=36
        print("Account number:", account_number)
        print("The customer can avail the amount of Rs.", eligible_loan_amount)
        print("Eligible EMIs :", bank_emi_expected)
        print("Requested loan amount:", loan_amount_expected)
        print("Requested EMI's:",customer_emi_expected)
    elif(loan_type=='House' and salary>50000 and customer_emi_expected<=60 and loan_amount_expected<=6000000):
        eligible_loan_amount=6000000
        bank_emi_expected=60
        print("Account number:", account_number)
        print("The customer can avail the amount of Rs.", eligible_loan_amount)
        print("Eligible EMIs :", bank_emi_expected)
        print("Requested loan amount:", loan_amount_expected)
        print("Requested EMI's:",customer_emi_expected)
    elif(loan_type=='Business' and salary>75000 and customer_emi_expected<=84 and loan_amount_expected<=7500000):
        eligible_loan_amount=7500000
        bank_emi_expected=84
        print("Account number:", account_number)
        print("The customer can avail the amount of Rs.", eligible_loan_amount)
        print("Eligible EMIs :", bank_emi_expected)
        print("Requested loan amount:", loan_amount_expected)
        print("Requested EMI's:",customer_emi_expected)
    else:
        print("The customer is not eligible for the loan")
    #Populate the variables: eligible_loan_amount and bank_emi_expected

    #Use the below given print statements to display the output, in case of success
    #print("Account number:", account_number)
    #print("The customer can avail the amount of Rs.", eligible_loan_amount)
    #print("Eligible EMIs :", bank_emi_expected)
    #print("Requested loan amount:", loan_amount_expected)
    #print("Requested EMI's:",customer_emi_expected)

    #Use the below given print statements to display the output, in case of invalid data.
    #print("Insufficient account balance")
    #print("The customer is not eligible for the loan")
    #print("Invalid account number")
    #print("Invalid loan type or salary")
    # Also, do not modify the above print statements for verification to work


#Test your code for different values and observe the results
calculate_loan(1001,40000,250000,"Car",300000,30)



#include<stdio.h>
int delete_front(int*,int,int);
int delete_rare(int*,int,int);
int insert_rare(int*,int,int);
int insert_front(int*,int,int);
void display(int*,int,int,int,int);
#define MAX 20
int main()
{
    int array[MAX],i,F1=-1,F2=MAX,R1=-1,R2=MAX,choice;
    do{
        printf("ENTER YOUR CHOICE:");
        printf("\n1:INSERT AT FRONT\n2:INSERT AT RARE\n3:DELETE AT FRONT\n4:DELETE AT RARE\n5:DISPLAY\n6:EXIT");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1:
            {
                R1=insert_front(array,R1,R2);
                if(F1==-1)
                F1++;
                break;
            }
            case 2:
            {
                R2=insert_rare(array,R1,R2);
                if(F2==MAX)
                F2--;
                break;
            }
            case 3:
            {
                F1=delete_front(array,R1,F1);
                if(F1==R1)
                {
                F1=-1;
                R1=-1;
                }
                break;
            }
            case 4:
            {
                F2=delete_rare(array,R2,F2);
                if(F2==R2)
                {
                    F2=MAX;
                    R2=MAX;
                }
                break;
            }
            case 5:
            {
                printf("FRONT ELEMENTS");
                int x,y;
                x=F1;
                y=R1;
                while(F1<=R1)
                {
                    printf("%d",array[F1++]);
                }
                x=F2;
                y=R2;
                while(F2>=R2)
                {
                    printf("%d",array[F2--]);
                }
                break;
            }
            default:
            {
                break;
            }
        }
    }while(choice<=5);
    return 0;
    
}


void display(int array[],int F1,int F2,int R1,int R2)
{
    printf("FRONT ELEMENTS");
    int x,y;
    x=F1;
    y=R1;
    while(F1<=R1)
    {
       printf("\t%d",array[F1++]);
    }
    printf("\n");
    x=F2;
    y=R2;
    while(F2>=R2)
    {
        printf("\t%d",array[F2--]);
    } 
}


int insert_front(int array[],int R1,int R2)
{
    int x;
    if(R1!=R2 && R1!= MAX-1)
    {
        printf("ENTER VALUE");
        scanf("%d",&x);
        R1++;
        array[R1]=x;
    }
    else{
        printf("STACK OVERFLAW");
        }
    return R1;
}


int insert_rare(int array[],int R1,int R2)
{
    int x;
    if(R1!=R2 && R2!= 0)
    {
        printf("ENTER VALUE");
        scanf("%d",&x);
        R2--;
        array[R2]=x;
    }
    else{
        printf("STACK OVERFLAW");
        }
    return R2;
}

int delete_front(int array[],int R1,int F1)
{
    int x;
    if(F1!=-1 && F1< R1)
    {
       
        R1++;
        x=array[R1];
        printf("%d\n",x);
    }
    else{
        printf("STACK UNDERFLAW");
        }
    return R1;
}

int delete_rare(int array[],int R2,int F2)
{
    int x;
    if(F2!=MAX && F2> R2)
    {
       
        R2--;
        x=array[R2];
        printf("%d\n",x);
    }
    else{
        printf("STACK UNDERFLOW");
        }
    return R2;
}
